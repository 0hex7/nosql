>show dbs //shows databases

>use db_name // created and switched to database

>db //tells working database

>db.createCollection('customer'); //creating collection

>show collections //shows all collection

***************************** CRUD against collections in mongodb ********************************************
	Create --> create doc
	Find(Read)   --> read the doc
	Update --> update,updateMany,updateOne,findAndModify,findOneAndUpdate
	Delete --> deleteMany,deleteOne,findOneAndDelete 

--------------------------------------------Create --> create doc------------------------------------------------

//can give custom id
>db.customer.insert({product:"pizza",total:1234,customer:"xyz"}); //insert single record
>db.customer.insertMany(
						[
							{product:"soap",total:234,customer:"john"},
							{product:"bike",total:2334,customer:"marry"}
						]
						); //insert multiple record in an arry



---------------------------------------------Find(Read) --> read the doc---------------------------------------

>db.customer.find().pretty(); //shows records data

>db.customer.find({product:"pizza"}).pretty();  //conditional based

>db.customer.find().sort({total:-1});	//decend

>db.customer.find().sort({total:1});	//assend

>db.customer.find().count();

>db.customer.find().limit(1); //limiting no if reccord

---------------------------------------------Delete --> deleteMany,deleteOne,findOneAndDelete-----------------

> db.customer.deleteOne({product:"bike"}); 

> db.customer.remove({product:"pizza"});
DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.

> db.customer.remove({customer:"john"},{justOne:true}); //deletes 1 from duplicate record


---------------------------Update --> update,upadteMany,upadteOne,findAndModify,findOneAndUpdate--------------

 	syntax:
 		db.Coll_name.update({identifier},{$set: {update data}});

>db.customer.update({customer:"john"},{$set: {product:"pizza"}});
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.

//no record for aman
> db.customer.update({customer:"aman"},{$set:{product:"apple",total:12,customer:"aman"}},{"upsert":true});
{
  acknowledged: true,
  insertedId: ObjectId("6378f6e401831b9de754838a"),
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}

//record aman exist
>db.customer.update({customer:"aman"},{$set:{product:"apple",total:12,customer:"aman"}},{"upsert":true});
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}


>db.customer.update({customer:"aman"},{$rename:{product:"changed"}}); //changes the key value field
{
    _id: ObjectId("6378f6e401831b9de754838a"),
    customer: 'aman',
    total: 12,
    (product)-->changed: 'apple'
  }


////forEach()


*********************************** Aggregate ********************************
// Find the total amount of money spent by each customer
db.purchase_orders.aggregate(
     [
          {$match: {} },
          {$group: {_id: "$customer", total: { $sum: "$total"} } }
     ]
)

// Find how much has been spent on each product and sort it by price
db.purchase_orders.aggregate(
     [
          {$match: {} },
          {$group: {_id: "$product", total: { $sum: "$total"} } },
          {$sort: {total: -1}}
     ]
)

// Find how much money each customer has spent on toothbrushes and pizza
db.purchase_orders.aggregate(
     [
          {$match: {product: {$in: ["toothbrush", "pizza"]} } },
          {$group: {_id: "$product", total: { $sum: "$total"} } },
     ]
)

---for compass---
>$project {key:0,key:1}
>$match {key:{$oprt :value}
		{key:value}
>$group {_id:$key, total_avg:{$sum_$avg (accumltr) :$total},.............}
>$sort {key:1 or -1}
>$count "string"
